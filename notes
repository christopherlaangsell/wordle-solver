;; USAGE

; SETUP 


; (def l-answers test-dict-answers)
; (def l-allowed-guesses test-dict-allowed-guesses)


(def l-answers dict-answers)
(def l-allowed-guesses dict-allowed-guesses)

(java.time.LocalDateTime/now)
(def r-firstmove   (evaluate-all-moves l-answers l-allowed-guesses)) ;; first run takes about 18 minutes with pmap across guesses, 148 minutes without, makes sense among 8 cores. 
; UPDATE  - takes 47 seconds with the new group-by style
(java.time.LocalDateTime/now)



; (map (fn [answers-set] (
;       (println "Answers set")
;        (pprint answers-set)
;        (harness-run-one-trial (repeat 2 r-firstmove) answers-set l-allowed-guesses harness-select-best-guess-global-min)
;        twodle-answers)

; SECTION: Run Simulations

; NOTE - pointer or memory issue with the above.

(loop [i 5640]         
  (harness-run-one-trial 
    (repeat 4 r-firstmove) 
    (nth quordle-answers i)  ;; note: imported into REPL
    l-allowed-guesses 
    harness-select-best-guess-global-min) (recur (inc i)))

(loop [i 8844]         
  (harness-run-one-trial 
    (repeat 8 r-firstmove) 
    (nth octordle-answers i)  ;; note: imported into REPL
    l-allowed-guesses 
    harness-select-best-guess-global-min) (recur (inc i)))



;; Run random trials
(dotimes [n 100]
  (let [answers-set (repeatedly 2 #(harness-generate-random-word l-answers))
        _ (println "Answers set")
        _ (pprint answers-set)]
        (harness-run-one-trial (repeat 2 r-firstmove) answers-set l-allowed-guesses harness-select-best-guess-global-min)))
        
;; Do all in dictionary (n = 1)
(map (fn [answer] 
  (let [answers-set (repeat 1 answer)
        _ (println "Answers set")
        _ (pprint answers-set)]
        (harness-run-one-trial (repeat 1 r-firstmove) answers-set l-allowed-guesses harness-select-best-guess-global-min)))
      l-answers)


;; BELOW PLAYBOOK: Using solver manually (TODO Update)

;; INIT 

(def l-results (repeat 4 r-firstmove))
(def game-state harness-initial-game-state)
(def f-heuristic harness-select-best-guess-summed)

(pprint (take 10 (-sum-entropies (map just-words-and-entropy l-results))))

(def w-guess (f-heuristic l-results (:found-words game-state)))


; LOOP

(println "STOP. Play move " w-guess)

;; get response masks
(def l-response-masks '(
  (2 2 2 2 2) 
  (2 2 2 2 2) 
  (0 1 1 1 0) 
  (2 2 2 2 2) 
  ))

(def game-state (harness-update-game-state game-state w-guess l-response-masks))

(println "New game state ")
(pprint game-state)

;; TODO check - are we done?

;; Make Move manually
(def move-results
  (play-moves l-allowed-guesses w-guess l-response-masks l-results))

(def l-results (first move-results))
(def l-answer-lists (second move-results))

(pprint
  (map list
     (map first l-results)
     l-answer-lists))

(pprint (take 10 (-sum-entropies (map just-words-and-entropy l-results))))

(def w-guess (f-heuristic l-results (:found-words game-state)))

(println "STOP. Play move " w-guess)

;; SECTION: TODOs
- Multi-file clojure setup

* [WON'T DO] NOTE: If entropies are equal, should we pick the alphabetically first word to be sure of consistency?

; Other caveats

; TODO - quordle dictionary includes "lynch!" (but wordle doesn't).  Where to find the dict?
